// /*
//  * Generated by PEG.js 0.10.0.
//  *
//  * http://pegjs.org/
//  */
//
// "use strict";
//
// function peg$subclass(child, parent) {
//   function ctor() { this.constructor = child; }
//   ctor.prototype = parent.prototype;
//   child.prototype = new ctor();
// }
//
// function peg$SyntaxError(message, expected, found, location) {
//   this.message  = message;
//   this.expected = expected;
//   this.found    = found;
//   this.location = location;
//   this.name     = "SyntaxError";
//
//   if (typeof Error.captureStackTrace === "function") {
//     Error.captureStackTrace(this, peg$SyntaxError);
//   }
// }
//
// peg$subclass(peg$SyntaxError, Error);
//
// peg$SyntaxError.buildMessage = function(expected, found) {
//   var DESCRIBE_EXPECTATION_FNS = {
//         literal: function(expectation) {
//           return "\"" + literalEscape(expectation.text) + "\"";
//         },
//
//         "class": function(expectation) {
//           var escapedParts = "",
//               i;
//
//           for (i = 0; i < expectation.parts.length; i++) {
//             escapedParts += expectation.parts[i] instanceof Array
//               ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
//               : classEscape(expectation.parts[i]);
//           }
//
//           return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
//         },
//
//         any: function(expectation) {
//           return "any character";
//         },
//
//         end: function(expectation) {
//           return "end of input";
//         },
//
//         other: function(expectation) {
//           return expectation.description;
//         }
//       };
//
//   function hex(ch) {
//     return ch.charCodeAt(0).toString(16).toUpperCase();
//   }
//
//   function literalEscape(s) {
//     return s
//       .replace(/\\/g, '\\\\')
//       .replace(/"/g,  '\\"')
//       .replace(/\0/g, '\\0')
//       .replace(/\t/g, '\\t')
//       .replace(/\n/g, '\\n')
//       .replace(/\r/g, '\\r')
//       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
//       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
//   }
//
//   function classEscape(s) {
//     return s
//       .replace(/\\/g, '\\\\')
//       .replace(/\]/g, '\\]')
//       .replace(/\^/g, '\\^')
//       .replace(/-/g,  '\\-')
//       .replace(/\0/g, '\\0')
//       .replace(/\t/g, '\\t')
//       .replace(/\n/g, '\\n')
//       .replace(/\r/g, '\\r')
//       .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
//       .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
//   }
//
//   function describeExpectation(expectation) {
//     return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
//   }
//
//   function describeExpected(expected) {
//     var descriptions = new Array(expected.length),
//         i, j;
//
//     for (i = 0; i < expected.length; i++) {
//       descriptions[i] = describeExpectation(expected[i]);
//     }
//
//     descriptions.sort();
//
//     if (descriptions.length > 0) {
//       for (i = 1, j = 1; i < descriptions.length; i++) {
//         if (descriptions[i - 1] !== descriptions[i]) {
//           descriptions[j] = descriptions[i];
//           j++;
//         }
//       }
//       descriptions.length = j;
//     }
//
//     switch (descriptions.length) {
//       case 1:
//         return descriptions[0];
//
//       case 2:
//         return descriptions[0] + " or " + descriptions[1];
//
//       default:
//         return descriptions.slice(0, -1).join(", ")
//           + ", or "
//           + descriptions[descriptions.length - 1];
//     }
//   }
//
//   function describeFound(found) {
//     return found ? "\"" + literalEscape(found) + "\"" : "end of input";
//   }
//
//   return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
// };
//
// function peg$parse(input, options) {
//   options = options !== void 0 ? options : {};
//
//   var peg$FAILED = {},
//
//       peg$startRuleFunctions = { Program: peg$parseProgram },
//       peg$startRuleFunction  = peg$parseProgram,
//
//       peg$c0 = ",",
//       peg$c1 = peg$literalExpectation(",", false),
//       peg$c2 = "\n",
//       peg$c3 = peg$literalExpectation("\n", false),
//       peg$c4 = function(s) {return s},
//       peg$c5 = " ",
//       peg$c6 = peg$literalExpectation(" ", false),
//       peg$c7 = "\t",
//       peg$c8 = peg$literalExpectation("\t", false),
//       peg$c9 = "(",
//       peg$c10 = peg$literalExpectation("(", false),
//       peg$c11 = /^[^)]/,
//       peg$c12 = peg$classExpectation([")"], true, false),
//       peg$c13 = ")",
//       peg$c14 = peg$literalExpectation(")", false),
//       peg$c15 = function(n) {return {t: 'Variable', n}},
//       peg$c16 = function() {return {t: 'Pronoun'}},
//       peg$c17 = "the",
//       peg$c18 = peg$literalExpectation("the", true),
//       peg$c19 = "my",
//       peg$c20 = peg$literalExpectation("my", true),
//       peg$c21 = "your",
//       peg$c22 = peg$literalExpectation("your", true),
//       peg$c23 = /^[a-z]/,
//       peg$c24 = peg$classExpectation([["a", "z"]], false, false),
//       peg$c25 = function(p, v) {return p+v},
//       peg$c26 = /^[A-Z]/,
//       peg$c27 = peg$classExpectation([["A", "Z"]], false, false),
//       peg$c28 = /^[A-Za-z]/,
//       peg$c29 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
//       peg$c30 = "it",
//       peg$c31 = peg$literalExpectation("it", true),
//       peg$c32 = "he",
//       peg$c33 = peg$literalExpectation("he", true),
//       peg$c34 = "she",
//       peg$c35 = peg$literalExpectation("she", true),
//       peg$c36 = "him",
//       peg$c37 = peg$literalExpectation("him", true),
//       peg$c38 = "her",
//       peg$c39 = peg$literalExpectation("her", true),
//       peg$c40 = "them",
//       peg$c41 = peg$literalExpectation("them", true),
//       peg$c42 = "they",
//       peg$c43 = peg$literalExpectation("they", true),
//       peg$c44 = "ze",
//       peg$c45 = peg$literalExpectation("ze", true),
//       peg$c46 = "hir",
//       peg$c47 = peg$literalExpectation("hir", true),
//       peg$c48 = "zie",
//       peg$c49 = peg$literalExpectation("zie", true),
//       peg$c50 = "zir",
//       peg$c51 = peg$literalExpectation("zir", true),
//       peg$c52 = "xe",
//       peg$c53 = peg$literalExpectation("xe", true),
//       peg$c54 = "xem",
//       peg$c55 = peg$literalExpectation("xem", true),
//       peg$c56 = "ve",
//       peg$c57 = peg$literalExpectation("ve", true),
//       peg$c58 = "ver",
//       peg$c59 = peg$literalExpectation("ver", true),
//       peg$c60 = function(v) { return {t: 'Literal', v} },
//       peg$c61 = "nothing",
//       peg$c62 = peg$literalExpectation("nothing", false),
//       peg$c63 = "nobody",
//       peg$c64 = peg$literalExpectation("nobody", false),
//       peg$c65 = "nowhere",
//       peg$c66 = peg$literalExpectation("nowhere", false),
//       peg$c67 = "empty",
//       peg$c68 = peg$literalExpectation("empty", false),
//       peg$c69 = "gone",
//       peg$c70 = peg$literalExpectation("gone", false),
//       peg$c71 = function() {return 0},
//       peg$c72 = "true",
//       peg$c73 = peg$literalExpectation("true", false),
//       peg$c74 = "right",
//       peg$c75 = peg$literalExpectation("right", false),
//       peg$c76 = "yes",
//       peg$c77 = peg$literalExpectation("yes", false),
//       peg$c78 = "ok",
//       peg$c79 = peg$literalExpectation("ok", false),
//       peg$c80 = function() {return true},
//       peg$c81 = "false",
//       peg$c82 = peg$literalExpectation("false", false),
//       peg$c83 = "wrong",
//       peg$c84 = peg$literalExpectation("wrong", false),
//       peg$c85 = "no",
//       peg$c86 = peg$literalExpectation("no", false),
//       peg$c87 = "lies",
//       peg$c88 = peg$literalExpectation("lies", false),
//       peg$c89 = function() {return false},
//       peg$c90 = "mysterious",
//       peg$c91 = peg$literalExpectation("mysterious", false),
//       peg$c92 = function() { return undefined},
//       peg$c93 = "\"",
//       peg$c94 = peg$literalExpectation("\"", false),
//       peg$c95 = /^[^"]/,
//       peg$c96 = peg$classExpectation(["\""], true, false),
//       peg$c97 = function(v) { return {t: 'Literal', v}},
//       peg$c98 = /^[0-9]/,
//       peg$c99 = peg$classExpectation([["0", "9"]], false, false),
//       peg$c100 = ".",
//       peg$c101 = peg$literalExpectation(".", false),
//       peg$c102 = function(n) { return {t: 'Literal', v: parseFloat(n)} },
//       peg$c103 = "Build",
//       peg$c104 = peg$literalExpectation("Build", false),
//       peg$c105 = "up",
//       peg$c106 = peg$literalExpectation("up", false),
//       peg$c107 = function(v) { return {t: 'Rement', v: v, o: '++'} },
//       peg$c108 = "Knock",
//       peg$c109 = peg$literalExpectation("Knock", false),
//       peg$c110 = "down",
//       peg$c111 = peg$literalExpectation("down", false),
//       peg$c112 = function(v) { return {t: 'Rement', v: v, o: '--'} },
//       peg$c113 = "says",
//       peg$c114 = peg$literalExpectation("says", false),
//       peg$c115 = /^[^\n]/,
//       peg$c116 = peg$classExpectation(["\n"], true, false),
//       peg$c117 = function(v, t) { return {t: 'Set', v: v, e: {t: 'Literal', v: t}} },
//       peg$c118 = function(n, d) {return {t: 'Literal', v: parseFloat(d?n+'.'+d:n)}},
//       peg$c119 = function(d) {return d},
//       peg$c120 = /^[',;:?!]/,
//       peg$c121 = peg$classExpectation(["'", ",", ";", ":", "?", "!"], false, false),
//       peg$c122 = function(l, r) { return l+r },
//       peg$c123 = function(d) { return d },
//       peg$c124 = function(t) {return (t.length%10).toString()},
//       peg$c125 = function(l, o, r) { return {t: 'Arithmetic', l, o, r} },
//       peg$c126 = "minus",
//       peg$c127 = peg$literalExpectation("minus", false),
//       peg$c128 = "without",
//       peg$c129 = peg$literalExpectation("without", false),
//       peg$c130 = function() {return '-'},
//       peg$c131 = "plus",
//       peg$c132 = peg$literalExpectation("plus", false),
//       peg$c133 = "with",
//       peg$c134 = peg$literalExpectation("with", false),
//       peg$c135 = function() {return '+'},
//       peg$c136 = "times",
//       peg$c137 = peg$literalExpectation("times", false),
//       peg$c138 = "of",
//       peg$c139 = peg$literalExpectation("of", false),
//       peg$c140 = function() {return '*'},
//       peg$c141 = "over",
//       peg$c142 = peg$literalExpectation("over", false),
//       peg$c143 = function() {return '/'},
//       peg$c144 = function(l, b, c, r) { return {t: 'Comparison', l, r, b, c} },
//       peg$c145 = "is",
//       peg$c146 = peg$literalExpectation("is", false),
//       peg$c147 = "not",
//       peg$c148 = peg$literalExpectation("not", false),
//       peg$c149 = "ain't",
//       peg$c150 = peg$literalExpectation("ain't", false),
//       peg$c151 = function() { return false },
//       peg$c152 = function() { return true },
//       peg$c153 = "higher",
//       peg$c154 = peg$literalExpectation("higher", false),
//       peg$c155 = "greater",
//       peg$c156 = peg$literalExpectation("greater", false),
//       peg$c157 = "bigger",
//       peg$c158 = peg$literalExpectation("bigger", false),
//       peg$c159 = "stronger",
//       peg$c160 = peg$literalExpectation("stronger", false),
//       peg$c161 = "than",
//       peg$c162 = peg$literalExpectation("than", false),
//       peg$c163 = function() { return 'gt' },
//       peg$c164 = "lower",
//       peg$c165 = peg$literalExpectation("lower", false),
//       peg$c166 = "less",
//       peg$c167 = peg$literalExpectation("less", false),
//       peg$c168 = "smaller",
//       peg$c169 = peg$literalExpectation("smaller", false),
//       peg$c170 = "weaker",
//       peg$c171 = peg$literalExpectation("weaker", false),
//       peg$c172 = function() { return 'lt' },
//       peg$c173 = "as",
//       peg$c174 = peg$literalExpectation("as", false),
//       peg$c175 = "high",
//       peg$c176 = peg$literalExpectation("high", false),
//       peg$c177 = "great",
//       peg$c178 = peg$literalExpectation("great", false),
//       peg$c179 = "big",
//       peg$c180 = peg$literalExpectation("big", false),
//       peg$c181 = "strong",
//       peg$c182 = peg$literalExpectation("strong", false),
//       peg$c183 = function() {return 'ge'},
//       peg$c184 = "low",
//       peg$c185 = peg$literalExpectation("low", false),
//       peg$c186 = "little",
//       peg$c187 = peg$literalExpectation("little", false),
//       peg$c188 = "small",
//       peg$c189 = peg$literalExpectation("small", false),
//       peg$c190 = "weak",
//       peg$c191 = peg$literalExpectation("weak", false),
//       peg$c192 = function() {return 'le'},
//       peg$c193 = "Listen",
//       peg$c194 = peg$literalExpectation("Listen", false),
//       peg$c195 = "to",
//       peg$c196 = peg$literalExpectation("to", false),
//       peg$c197 = function(v) {return {t:'Listen', v}},
//       peg$c198 = "Say",
//       peg$c199 = peg$literalExpectation("Say", false),
//       peg$c200 = "Shout",
//       peg$c201 = peg$literalExpectation("Shout", false),
//       peg$c202 = "Whisper",
//       peg$c203 = peg$literalExpectation("Whisper", false),
//       peg$c204 = "Scream",
//       peg$c205 = peg$literalExpectation("Scream", false),
//       peg$c206 = function(e) {return {t:'Say', e}},
//       peg$c207 = "If",
//       peg$c208 = peg$literalExpectation("If", false),
//       peg$c209 = function(e) { return {t: 'If', e} },
//       peg$c210 = "Else",
//       peg$c211 = peg$literalExpectation("Else", false),
//       peg$c212 = function() {return {t: 'Else'}},
//       peg$c213 = "While",
//       peg$c214 = peg$literalExpectation("While", false),
//       peg$c215 = "Until",
//       peg$c216 = peg$literalExpectation("Until", false),
//       peg$c217 = function(c, e) { return {t: 'Loop', c, e} },
//       peg$c218 = "Continue",
//       peg$c219 = peg$literalExpectation("Continue", false),
//       peg$c220 = "Take",
//       peg$c221 = peg$literalExpectation("Take", false),
//       peg$c222 = peg$literalExpectation("it", false),
//       peg$c223 = peg$literalExpectation("the", false),
//       peg$c224 = "top",
//       peg$c225 = peg$literalExpectation("top", false),
//       peg$c226 = function() {return {t: 'Continue'}},
//       peg$c227 = "Break",
//       peg$c228 = peg$literalExpectation("Break", false),
//       peg$c229 = function() {return {t: 'Break'}},
//       peg$c230 = "takes",
//       peg$c231 = peg$literalExpectation("takes", false),
//       peg$c232 = function(n, a) { return {t: 'FunctionDeclaration', n, a: a.map(a => a.n)} },
//       peg$c233 = "and",
//       peg$c234 = peg$literalExpectation("and", false),
//       peg$c235 = function(a, b) { return [a].concat(b) },
//       peg$c236 = function(a) { return [a] },
//       peg$c237 = "Give back",
//       peg$c238 = peg$literalExpectation("Give back", false),
//       peg$c239 = function(e) { return {t: 'GiveBack', e} },
//       peg$c240 = "",
//       peg$c241 = function() {return {t: 'BlankLine'}},
//       peg$c242 = "taking",
//       peg$c243 = peg$literalExpectation("taking", false),
//       peg$c244 = function(f, a) { return {t: 'FunctionCall', f, a} },
//       peg$c245 = "or",
//       peg$c246 = peg$literalExpectation("or", false),
//       peg$c247 = function(l, b, r) { return {t: 'BooleanOperation', l, b, r} },
//       peg$c248 = function(l) { return l },
//       peg$c249 = "was",
//       peg$c250 = peg$literalExpectation("was", false),
//       peg$c251 = "were",
//       peg$c252 = peg$literalExpectation("were", false),
//       peg$c253 = function(v, e) { return {t: 'Set', v: v, e} },
//       peg$c254 = "Put",
//       peg$c255 = peg$literalExpectation("Put", false),
//       peg$c256 = "into",
//       peg$c257 = peg$literalExpectation("into", false),
//       peg$c258 = function(e, v) { return {t: 'Set', v: v, e} },
//
//       peg$currPos          = 0,
//       peg$savedPos         = 0,
//       peg$posDetailsCache  = [{ line: 1, column: 1 }],
//       peg$maxFailPos       = 0,
//       peg$maxFailExpected  = [],
//       peg$silentFails      = 0,
//
//       peg$result;
//
//   if ("startRule" in options) {
//     if (!(options.startRule in peg$startRuleFunctions)) {
//       throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
//     }
//
//     peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
//   }
//
//   function text() {
//     return input.substring(peg$savedPos, peg$currPos);
//   }
//
//   function location() {
//     return peg$computeLocation(peg$savedPos, peg$currPos);
//   }
//
//   function expected(description, location) {
//     location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
//
//     throw peg$buildStructuredError(
//       [peg$otherExpectation(description)],
//       input.substring(peg$savedPos, peg$currPos),
//       location
//     );
//   }
//
//   function error(message, location) {
//     location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
//
//     throw peg$buildSimpleError(message, location);
//   }
//
//   function peg$literalExpectation(text, ignoreCase) {
//     return { type: "literal", text: text, ignoreCase: ignoreCase };
//   }
//
//   function peg$classExpectation(parts, inverted, ignoreCase) {
//     return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
//   }
//
//   function peg$anyExpectation() {
//     return { type: "any" };
//   }
//
//   function peg$endExpectation() {
//     return { type: "end" };
//   }
//
//   function peg$otherExpectation(description) {
//     return { type: "other", description: description };
//   }
//
//   function peg$computePosDetails(pos) {
//     var details = peg$posDetailsCache[pos], p;
//
//     if (details) {
//       return details;
//     } else {
//       p = pos - 1;
//       while (!peg$posDetailsCache[p]) {
//         p--;
//       }
//
//       details = peg$posDetailsCache[p];
//       details = {
//         line:   details.line,
//         column: details.column
//       };
//
//       while (p < pos) {
//         if (input.charCodeAt(p) === 10) {
//           details.line++;
//           details.column = 1;
//         } else {
//           details.column++;
//         }
//
//         p++;
//       }
//
//       peg$posDetailsCache[pos] = details;
//       return details;
//     }
//   }
//
//   function peg$computeLocation(startPos, endPos) {
//     var startPosDetails = peg$computePosDetails(startPos),
//         endPosDetails   = peg$computePosDetails(endPos);
//
//     return {
//       start: {
//         offset: startPos,
//         line:   startPosDetails.line,
//         column: startPosDetails.column
//       },
//       end: {
//         offset: endPos,
//         line:   endPosDetails.line,
//         column: endPosDetails.column
//       }
//     };
//   }
//
//   function peg$fail(expected) {
//     if (peg$currPos < peg$maxFailPos) { return; }
//
//     if (peg$currPos > peg$maxFailPos) {
//       peg$maxFailPos = peg$currPos;
//       peg$maxFailExpected = [];
//     }
//
//     peg$maxFailExpected.push(expected);
//   }
//
//   function peg$buildSimpleError(message, location) {
//     return new peg$SyntaxError(message, null, null, location);
//   }
//
//   function peg$buildStructuredError(expected, found, location) {
//     return new peg$SyntaxError(
//       peg$SyntaxError.buildMessage(expected, found),
//       expected,
//       found,
//       location
//     );
//   }
//
//   function peg$parseProgram() {
//     var s0, s1;
//
//     s0 = [];
//     s1 = peg$parseStatement();
//     while (s1 !== peg$FAILED) {
//       s0.push(s1);
//       s1 = peg$parseStatement();
//     }
//
//     return s0;
//   }
//
//   function peg$parseStatement() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parse_();
//     if (s1 === peg$FAILED) {
//       s1 = null;
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parseFunctionDeclaration();
//       if (s2 === peg$FAILED) {
//         s2 = peg$parseOperation();
//         if (s2 === peg$FAILED) {
//           s2 = peg$parseBlankLine();
//         }
//       }
//       if (s2 !== peg$FAILED) {
//         if (input.charCodeAt(peg$currPos) === 44) {
//           s3 = peg$c0;
//           peg$currPos++;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c1); }
//         }
//         if (s3 === peg$FAILED) {
//           s3 = null;
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = [];
//           s5 = peg$parse_();
//           while (s5 !== peg$FAILED) {
//             s4.push(s5);
//             s5 = peg$parse_();
//           }
//           if (s4 !== peg$FAILED) {
//             if (input.charCodeAt(peg$currPos) === 10) {
//               s5 = peg$c2;
//               peg$currPos++;
//             } else {
//               s5 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c3); }
//             }
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c4(s2);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseOperation() {
//     var s0;
//
//     s0 = peg$parseLoop();
//     if (s0 === peg$FAILED) {
//       s0 = peg$parseIf();
//       if (s0 === peg$FAILED) {
//         s0 = peg$parseArithmeticStatement();
//         if (s0 === peg$FAILED) {
//           s0 = peg$parseGiveBack();
//           if (s0 === peg$FAILED) {
//             s0 = peg$parseSet();
//             if (s0 === peg$FAILED) {
//               s0 = peg$parsePut();
//               if (s0 === peg$FAILED) {
//                 s0 = peg$parseListen();
//                 if (s0 === peg$FAILED) {
//                   s0 = peg$parseSay();
//                   if (s0 === peg$FAILED) {
//                     s0 = peg$parseContinue();
//                     if (s0 === peg$FAILED) {
//                       s0 = peg$parseBreak();
//                       if (s0 === peg$FAILED) {
//                         s0 = peg$parsePoeticString();
//                       }
//                     }
//                   }
//                 }
//               }
//             }
//           }
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parse_() {
//     var s0, s1;
//
//     s0 = [];
//     if (input.charCodeAt(peg$currPos) === 32) {
//       s1 = peg$c5;
//       peg$currPos++;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c6); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.charCodeAt(peg$currPos) === 9) {
//         s1 = peg$c7;
//         peg$currPos++;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c8); }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       while (s1 !== peg$FAILED) {
//         s0.push(s1);
//         if (input.charCodeAt(peg$currPos) === 32) {
//           s1 = peg$c5;
//           peg$currPos++;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c6); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.charCodeAt(peg$currPos) === 9) {
//             s1 = peg$c7;
//             peg$currPos++;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c8); }
//           }
//         }
//       }
//     } else {
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$parseComment();
//     }
//
//     return s0;
//   }
//
//   function peg$parseComment() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.charCodeAt(peg$currPos) === 40) {
//       s1 = peg$c9;
//       peg$currPos++;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c10); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = [];
//       if (peg$c11.test(input.charAt(peg$currPos))) {
//         s3 = input.charAt(peg$currPos);
//         peg$currPos++;
//       } else {
//         s3 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c12); }
//       }
//       while (s3 !== peg$FAILED) {
//         s2.push(s3);
//         if (peg$c11.test(input.charAt(peg$currPos))) {
//           s3 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c12); }
//         }
//       }
//       if (s2 !== peg$FAILED) {
//         if (input.charCodeAt(peg$currPos) === 41) {
//           s3 = peg$c13;
//           peg$currPos++;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c14); }
//         }
//         if (s3 !== peg$FAILED) {
//           s1 = [s1, s2, s3];
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseVariable() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     s1 = peg$parseCommonVariable();
//     if (s1 === peg$FAILED) {
//       s1 = peg$parseProperVariable();
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c15(s1);
//     }
//     s0 = s1;
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parsePronoun();
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c16();
//       }
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parseCommonVariable() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 3).toLowerCase() === peg$c17) {
//       s1 = input.substr(peg$currPos, 3);
//       peg$currPos += 3;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c18); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 2).toLowerCase() === peg$c19) {
//         s1 = input.substr(peg$currPos, 2);
//         peg$currPos += 2;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c20); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 4).toLowerCase() === peg$c21) {
//           s1 = input.substr(peg$currPos, 4);
//           peg$currPos += 4;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c22); }
//         }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$currPos;
//         s4 = [];
//         if (peg$c23.test(input.charAt(peg$currPos))) {
//           s5 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s5 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c24); }
//         }
//         if (s5 !== peg$FAILED) {
//           while (s5 !== peg$FAILED) {
//             s4.push(s5);
//             if (peg$c23.test(input.charAt(peg$currPos))) {
//               s5 = input.charAt(peg$currPos);
//               peg$currPos++;
//             } else {
//               s5 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c24); }
//             }
//           }
//         } else {
//           s4 = peg$FAILED;
//         }
//         if (s4 !== peg$FAILED) {
//           s3 = input.substring(s3, peg$currPos);
//         } else {
//           s3 = s4;
//         }
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c25(s1, s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseProperWord() {
//     var s0, s1, s2, s3, s4;
//
//     s0 = peg$currPos;
//     s1 = peg$currPos;
//     if (peg$c26.test(input.charAt(peg$currPos))) {
//       s2 = input.charAt(peg$currPos);
//       peg$currPos++;
//     } else {
//       s2 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c27); }
//     }
//     if (s2 !== peg$FAILED) {
//       s3 = [];
//       if (peg$c28.test(input.charAt(peg$currPos))) {
//         s4 = input.charAt(peg$currPos);
//         peg$currPos++;
//       } else {
//         s4 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c29); }
//       }
//       if (s4 !== peg$FAILED) {
//         while (s4 !== peg$FAILED) {
//           s3.push(s4);
//           if (peg$c28.test(input.charAt(peg$currPos))) {
//             s4 = input.charAt(peg$currPos);
//             peg$currPos++;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c29); }
//           }
//         }
//       } else {
//         s3 = peg$FAILED;
//       }
//       if (s3 !== peg$FAILED) {
//         s2 = [s2, s3];
//         s1 = s2;
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s1;
//       s1 = peg$FAILED;
//     }
//     if (s1 !== peg$FAILED) {
//       s0 = input.substring(s0, peg$currPos);
//     } else {
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parseProperVariable() {
//     var s0, s1, s2, s3, s4;
//
//     s0 = peg$currPos;
//     s1 = peg$currPos;
//     s2 = peg$parseProperWord();
//     if (s2 !== peg$FAILED) {
//       s3 = peg$parse_();
//       if (s3 !== peg$FAILED) {
//         s4 = peg$parseProperVariable();
//         if (s4 !== peg$FAILED) {
//           s2 = [s2, s3, s4];
//           s1 = s2;
//         } else {
//           peg$currPos = s1;
//           s1 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s1;
//       s1 = peg$FAILED;
//     }
//     if (s1 !== peg$FAILED) {
//       s0 = input.substring(s0, peg$currPos);
//     } else {
//       s0 = s1;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parseProperWord();
//       if (s1 !== peg$FAILED) {
//         s0 = input.substring(s0, peg$currPos);
//       } else {
//         s0 = s1;
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parsePronoun() {
//     var s0;
//
//     if (input.substr(peg$currPos, 2).toLowerCase() === peg$c30) {
//       s0 = input.substr(peg$currPos, 2);
//       peg$currPos += 2;
//     } else {
//       s0 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c31); }
//     }
//     if (s0 === peg$FAILED) {
//       if (input.substr(peg$currPos, 2).toLowerCase() === peg$c32) {
//         s0 = input.substr(peg$currPos, 2);
//         peg$currPos += 2;
//       } else {
//         s0 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c33); }
//       }
//       if (s0 === peg$FAILED) {
//         if (input.substr(peg$currPos, 3).toLowerCase() === peg$c34) {
//           s0 = input.substr(peg$currPos, 3);
//           peg$currPos += 3;
//         } else {
//           s0 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c35); }
//         }
//         if (s0 === peg$FAILED) {
//           if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
//             s0 = input.substr(peg$currPos, 3);
//             peg$currPos += 3;
//           } else {
//             s0 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c37); }
//           }
//           if (s0 === peg$FAILED) {
//             if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {
//               s0 = input.substr(peg$currPos, 3);
//               peg$currPos += 3;
//             } else {
//               s0 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c39); }
//             }
//             if (s0 === peg$FAILED) {
//               if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {
//                 s0 = input.substr(peg$currPos, 4);
//                 peg$currPos += 4;
//               } else {
//                 s0 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c41); }
//               }
//               if (s0 === peg$FAILED) {
//                 if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
//                   s0 = input.substr(peg$currPos, 4);
//                   peg$currPos += 4;
//                 } else {
//                   s0 = peg$FAILED;
//                   if (peg$silentFails === 0) { peg$fail(peg$c43); }
//                 }
//                 if (s0 === peg$FAILED) {
//                   if (input.substr(peg$currPos, 2).toLowerCase() === peg$c44) {
//                     s0 = input.substr(peg$currPos, 2);
//                     peg$currPos += 2;
//                   } else {
//                     s0 = peg$FAILED;
//                     if (peg$silentFails === 0) { peg$fail(peg$c45); }
//                   }
//                   if (s0 === peg$FAILED) {
//                     if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {
//                       s0 = input.substr(peg$currPos, 3);
//                       peg$currPos += 3;
//                     } else {
//                       s0 = peg$FAILED;
//                       if (peg$silentFails === 0) { peg$fail(peg$c47); }
//                     }
//                     if (s0 === peg$FAILED) {
//                       if (input.substr(peg$currPos, 3).toLowerCase() === peg$c48) {
//                         s0 = input.substr(peg$currPos, 3);
//                         peg$currPos += 3;
//                       } else {
//                         s0 = peg$FAILED;
//                         if (peg$silentFails === 0) { peg$fail(peg$c49); }
//                       }
//                       if (s0 === peg$FAILED) {
//                         if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {
//                           s0 = input.substr(peg$currPos, 3);
//                           peg$currPos += 3;
//                         } else {
//                           s0 = peg$FAILED;
//                           if (peg$silentFails === 0) { peg$fail(peg$c51); }
//                         }
//                         if (s0 === peg$FAILED) {
//                           if (input.substr(peg$currPos, 2).toLowerCase() === peg$c52) {
//                             s0 = input.substr(peg$currPos, 2);
//                             peg$currPos += 2;
//                           } else {
//                             s0 = peg$FAILED;
//                             if (peg$silentFails === 0) { peg$fail(peg$c53); }
//                           }
//                           if (s0 === peg$FAILED) {
//                             if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {
//                               s0 = input.substr(peg$currPos, 3);
//                               peg$currPos += 3;
//                             } else {
//                               s0 = peg$FAILED;
//                               if (peg$silentFails === 0) { peg$fail(peg$c55); }
//                             }
//                             if (s0 === peg$FAILED) {
//                               if (input.substr(peg$currPos, 2).toLowerCase() === peg$c56) {
//                                 s0 = input.substr(peg$currPos, 2);
//                                 peg$currPos += 2;
//                               } else {
//                                 s0 = peg$FAILED;
//                                 if (peg$silentFails === 0) { peg$fail(peg$c57); }
//                               }
//                               if (s0 === peg$FAILED) {
//                                 if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
//                                   s0 = input.substr(peg$currPos, 3);
//                                   peg$currPos += 3;
//                                 } else {
//                                   s0 = peg$FAILED;
//                                   if (peg$silentFails === 0) { peg$fail(peg$c59); }
//                                 }
//                               }
//                             }
//                           }
//                         }
//                       }
//                     }
//                   }
//                 }
//               }
//             }
//           }
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseTypeLiteral() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     s1 = peg$parseTypeLiteralValue();
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c60(s1);
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseTypeLiteralValue() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 7) === peg$c61) {
//       s1 = peg$c61;
//       peg$currPos += 7;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c62); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 6) === peg$c63) {
//         s1 = peg$c63;
//         peg$currPos += 6;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c64); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 7) === peg$c65) {
//           s1 = peg$c65;
//           peg$currPos += 7;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c66); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 5) === peg$c67) {
//             s1 = peg$c67;
//             peg$currPos += 5;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c68); }
//           }
//           if (s1 === peg$FAILED) {
//             if (input.substr(peg$currPos, 4) === peg$c69) {
//               s1 = peg$c69;
//               peg$currPos += 4;
//             } else {
//               s1 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c70); }
//             }
//           }
//         }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c71();
//     }
//     s0 = s1;
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       if (input.substr(peg$currPos, 4) === peg$c72) {
//         s1 = peg$c72;
//         peg$currPos += 4;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c73); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 5) === peg$c74) {
//           s1 = peg$c74;
//           peg$currPos += 5;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c75); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 3) === peg$c76) {
//             s1 = peg$c76;
//             peg$currPos += 3;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c77); }
//           }
//           if (s1 === peg$FAILED) {
//             if (input.substr(peg$currPos, 2) === peg$c78) {
//               s1 = peg$c78;
//               peg$currPos += 2;
//             } else {
//               s1 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c79); }
//             }
//           }
//         }
//       }
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c80();
//       }
//       s0 = s1;
//       if (s0 === peg$FAILED) {
//         s0 = peg$currPos;
//         if (input.substr(peg$currPos, 5) === peg$c81) {
//           s1 = peg$c81;
//           peg$currPos += 5;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c82); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 5) === peg$c83) {
//             s1 = peg$c83;
//             peg$currPos += 5;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c84); }
//           }
//           if (s1 === peg$FAILED) {
//             if (input.substr(peg$currPos, 2) === peg$c85) {
//               s1 = peg$c85;
//               peg$currPos += 2;
//             } else {
//               s1 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c86); }
//             }
//             if (s1 === peg$FAILED) {
//               if (input.substr(peg$currPos, 4) === peg$c87) {
//                 s1 = peg$c87;
//                 peg$currPos += 4;
//               } else {
//                 s1 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c88); }
//               }
//             }
//           }
//         }
//         if (s1 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c89();
//         }
//         s0 = s1;
//         if (s0 === peg$FAILED) {
//           s0 = peg$currPos;
//           if (input.substr(peg$currPos, 10) === peg$c90) {
//             s1 = peg$c90;
//             peg$currPos += 10;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c91); }
//           }
//           if (s1 !== peg$FAILED) {
//             peg$savedPos = s0;
//             s1 = peg$c92();
//           }
//           s0 = s1;
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseString() {
//     var s0, s1, s2, s3, s4;
//
//     s0 = peg$currPos;
//     if (input.charCodeAt(peg$currPos) === 34) {
//       s1 = peg$c93;
//       peg$currPos++;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c94); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$currPos;
//       s3 = [];
//       if (peg$c95.test(input.charAt(peg$currPos))) {
//         s4 = input.charAt(peg$currPos);
//         peg$currPos++;
//       } else {
//         s4 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c96); }
//       }
//       if (s4 !== peg$FAILED) {
//         while (s4 !== peg$FAILED) {
//           s3.push(s4);
//           if (peg$c95.test(input.charAt(peg$currPos))) {
//             s4 = input.charAt(peg$currPos);
//             peg$currPos++;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c96); }
//           }
//         }
//       } else {
//         s3 = peg$FAILED;
//       }
//       if (s3 !== peg$FAILED) {
//         s2 = input.substring(s2, peg$currPos);
//       } else {
//         s2 = s3;
//       }
//       if (s2 !== peg$FAILED) {
//         if (input.charCodeAt(peg$currPos) === 34) {
//           s3 = peg$c93;
//           peg$currPos++;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c94); }
//         }
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c97(s2);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseNumber() {
//     var s0, s1, s2, s3, s4, s5, s6, s7;
//
//     s0 = peg$currPos;
//     s1 = peg$currPos;
//     s2 = peg$currPos;
//     s3 = [];
//     if (peg$c98.test(input.charAt(peg$currPos))) {
//       s4 = input.charAt(peg$currPos);
//       peg$currPos++;
//     } else {
//       s4 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c99); }
//     }
//     if (s4 !== peg$FAILED) {
//       while (s4 !== peg$FAILED) {
//         s3.push(s4);
//         if (peg$c98.test(input.charAt(peg$currPos))) {
//           s4 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s4 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c99); }
//         }
//       }
//     } else {
//       s3 = peg$FAILED;
//     }
//     if (s3 !== peg$FAILED) {
//       s4 = peg$currPos;
//       if (input.charCodeAt(peg$currPos) === 46) {
//         s5 = peg$c100;
//         peg$currPos++;
//       } else {
//         s5 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c101); }
//       }
//       if (s5 !== peg$FAILED) {
//         s6 = [];
//         if (peg$c98.test(input.charAt(peg$currPos))) {
//           s7 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s7 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c99); }
//         }
//         if (s7 !== peg$FAILED) {
//           while (s7 !== peg$FAILED) {
//             s6.push(s7);
//             if (peg$c98.test(input.charAt(peg$currPos))) {
//               s7 = input.charAt(peg$currPos);
//               peg$currPos++;
//             } else {
//               s7 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c99); }
//             }
//           }
//         } else {
//           s6 = peg$FAILED;
//         }
//         if (s6 !== peg$FAILED) {
//           s5 = [s5, s6];
//           s4 = s5;
//         } else {
//           peg$currPos = s4;
//           s4 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s4;
//         s4 = peg$FAILED;
//       }
//       if (s4 === peg$FAILED) {
//         s4 = null;
//       }
//       if (s4 !== peg$FAILED) {
//         s3 = [s3, s4];
//         s2 = s3;
//       } else {
//         peg$currPos = s2;
//         s2 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s2;
//       s2 = peg$FAILED;
//     }
//     if (s2 !== peg$FAILED) {
//       s1 = input.substring(s1, peg$currPos);
//     } else {
//       s1 = s2;
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c102(s1);
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseArithmeticStatement() {
//     var s0;
//
//     s0 = peg$parseBuildUp();
//     if (s0 === peg$FAILED) {
//       s0 = peg$parseKnockDown();
//     }
//
//     return s0;
//   }
//
//   function peg$parseBuildUp() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 5) === peg$c103) {
//       s1 = peg$c103;
//       peg$currPos += 5;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c104); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseVariable();
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             if (input.substr(peg$currPos, 2) === peg$c105) {
//               s5 = peg$c105;
//               peg$currPos += 2;
//             } else {
//               s5 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c106); }
//             }
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c107(s3);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseKnockDown() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 5) === peg$c108) {
//       s1 = peg$c108;
//       peg$currPos += 5;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c109); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseVariable();
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             if (input.substr(peg$currPos, 4) === peg$c110) {
//               s5 = peg$c110;
//               peg$currPos += 4;
//             } else {
//               s5 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c111); }
//             }
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c112(s3);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePoeticString() {
//     var s0, s1, s2, s3, s4, s5, s6, s7;
//
//     s0 = peg$currPos;
//     s1 = peg$parseVariable();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 4) === peg$c113) {
//           s3 = peg$c113;
//           peg$currPos += 4;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c114); }
//         }
//         if (s3 !== peg$FAILED) {
//           if (input.charCodeAt(peg$currPos) === 32) {
//             s4 = peg$c5;
//             peg$currPos++;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c6); }
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$currPos;
//             s6 = [];
//             if (peg$c115.test(input.charAt(peg$currPos))) {
//               s7 = input.charAt(peg$currPos);
//               peg$currPos++;
//             } else {
//               s7 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c116); }
//             }
//             while (s7 !== peg$FAILED) {
//               s6.push(s7);
//               if (peg$c115.test(input.charAt(peg$currPos))) {
//                 s7 = input.charAt(peg$currPos);
//                 peg$currPos++;
//               } else {
//                 s7 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c116); }
//               }
//             }
//             if (s6 !== peg$FAILED) {
//               s5 = input.substring(s5, peg$currPos);
//             } else {
//               s5 = s6;
//             }
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c117(s1, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePoeticNumber() {
//     var s0, s1, s2;
//
//     s0 = peg$currPos;
//     s1 = peg$parsePoeticDigits();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parsePoeticDecimal();
//       if (s2 === peg$FAILED) {
//         s2 = null;
//       }
//       if (s2 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c118(s1, s2);
//         s0 = s1;
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePoeticDecimal() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.charCodeAt(peg$currPos) === 46) {
//       s1 = peg$c100;
//       peg$currPos++;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c101); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parsePoeticDigits();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c119(s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePoeticDigits() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     s1 = peg$parsePoeticDigit();
//     if (s1 !== peg$FAILED) {
//       s2 = [];
//       s3 = peg$parse_();
//       if (s3 === peg$FAILED) {
//         if (peg$c120.test(input.charAt(peg$currPos))) {
//           s3 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c121); }
//         }
//       }
//       if (s3 !== peg$FAILED) {
//         while (s3 !== peg$FAILED) {
//           s2.push(s3);
//           s3 = peg$parse_();
//           if (s3 === peg$FAILED) {
//             if (peg$c120.test(input.charAt(peg$currPos))) {
//               s3 = input.charAt(peg$currPos);
//               peg$currPos++;
//             } else {
//               s3 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c121); }
//             }
//           }
//         }
//       } else {
//         s2 = peg$FAILED;
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parsePoeticDigits();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c122(s1, s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parsePoeticDigit();
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c123(s1);
//       }
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePoeticDigit() {
//     var s0, s1, s2;
//
//     s0 = peg$currPos;
//     s1 = [];
//     if (peg$c28.test(input.charAt(peg$currPos))) {
//       s2 = input.charAt(peg$currPos);
//       peg$currPos++;
//     } else {
//       s2 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c29); }
//     }
//     if (s2 !== peg$FAILED) {
//       while (s2 !== peg$FAILED) {
//         s1.push(s2);
//         if (peg$c28.test(input.charAt(peg$currPos))) {
//           s2 = input.charAt(peg$currPos);
//           peg$currPos++;
//         } else {
//           s2 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c29); }
//         }
//       }
//     } else {
//       s1 = peg$FAILED;
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c124(s1);
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseArithmeticExpression() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseSimpleExpression();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseArithmeticOperator();
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseSimpleExpression();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c125(s1, s3, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseArithmeticOperator() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 5) === peg$c126) {
//       s1 = peg$c126;
//       peg$currPos += 5;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c127); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 7) === peg$c128) {
//         s1 = peg$c128;
//         peg$currPos += 7;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c129); }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c130();
//     }
//     s0 = s1;
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       if (input.substr(peg$currPos, 4) === peg$c131) {
//         s1 = peg$c131;
//         peg$currPos += 4;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c132); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 4) === peg$c133) {
//           s1 = peg$c133;
//           peg$currPos += 4;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c134); }
//         }
//       }
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c135();
//       }
//       s0 = s1;
//       if (s0 === peg$FAILED) {
//         s0 = peg$currPos;
//         if (input.substr(peg$currPos, 5) === peg$c136) {
//           s1 = peg$c136;
//           peg$currPos += 5;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c137); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 2) === peg$c138) {
//             s1 = peg$c138;
//             peg$currPos += 2;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c139); }
//           }
//         }
//         if (s1 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c140();
//         }
//         s0 = s1;
//         if (s0 === peg$FAILED) {
//           s0 = peg$currPos;
//           if (input.substr(peg$currPos, 4) === peg$c141) {
//             s1 = peg$c141;
//             peg$currPos += 4;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c142); }
//           }
//           if (s1 !== peg$FAILED) {
//             peg$savedPos = s0;
//             s1 = peg$c143();
//           }
//           s0 = s1;
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseComparison() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseSimpleExpression();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseBoolCheck();
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parseComparator();
//           if (s4 === peg$FAILED) {
//             s4 = null;
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseSimpleExpression();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c144(s1, s3, s4, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseBoolCheck() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$currPos;
//     if (input.substr(peg$currPos, 2) === peg$c145) {
//       s2 = peg$c145;
//       peg$currPos += 2;
//     } else {
//       s2 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c146); }
//     }
//     if (s2 !== peg$FAILED) {
//       s3 = peg$parse_();
//       if (s3 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 3) === peg$c147) {
//           s4 = peg$c147;
//           peg$currPos += 3;
//         } else {
//           s4 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c148); }
//         }
//         if (s4 !== peg$FAILED) {
//           s5 = peg$parse_();
//           if (s5 !== peg$FAILED) {
//             s2 = [s2, s3, s4, s5];
//             s1 = s2;
//           } else {
//             peg$currPos = s1;
//             s1 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s1;
//           s1 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s1;
//       s1 = peg$FAILED;
//     }
//     if (s1 === peg$FAILED) {
//       s1 = peg$currPos;
//       if (input.substr(peg$currPos, 5) === peg$c149) {
//         s2 = peg$c149;
//         peg$currPos += 5;
//       } else {
//         s2 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c150); }
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parse_();
//         if (s3 !== peg$FAILED) {
//           s2 = [s2, s3];
//           s1 = s2;
//         } else {
//           peg$currPos = s1;
//           s1 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c151();
//     }
//     s0 = s1;
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       if (input.substr(peg$currPos, 2) === peg$c145) {
//         s1 = peg$c145;
//         peg$currPos += 2;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c146); }
//       }
//       if (s1 !== peg$FAILED) {
//         s2 = peg$parse_();
//         if (s2 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c152();
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseComparator() {
//     var s0, s1, s2, s3, s4, s5, s6;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 6) === peg$c153) {
//       s1 = peg$c153;
//       peg$currPos += 6;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c154); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 7) === peg$c155) {
//         s1 = peg$c155;
//         peg$currPos += 7;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c156); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 6) === peg$c157) {
//           s1 = peg$c157;
//           peg$currPos += 6;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c158); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 8) === peg$c159) {
//             s1 = peg$c159;
//             peg$currPos += 8;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c160); }
//           }
//         }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 4) === peg$c161) {
//           s3 = peg$c161;
//           peg$currPos += 4;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c162); }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             peg$savedPos = s0;
//             s1 = peg$c163();
//             s0 = s1;
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       if (input.substr(peg$currPos, 5) === peg$c164) {
//         s1 = peg$c164;
//         peg$currPos += 5;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c165); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 4) === peg$c166) {
//           s1 = peg$c166;
//           peg$currPos += 4;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c167); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 7) === peg$c168) {
//             s1 = peg$c168;
//             peg$currPos += 7;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c169); }
//           }
//           if (s1 === peg$FAILED) {
//             if (input.substr(peg$currPos, 6) === peg$c170) {
//               s1 = peg$c170;
//               peg$currPos += 6;
//             } else {
//               s1 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c171); }
//             }
//           }
//         }
//       }
//       if (s1 !== peg$FAILED) {
//         s2 = peg$parse_();
//         if (s2 !== peg$FAILED) {
//           if (input.substr(peg$currPos, 4) === peg$c161) {
//             s3 = peg$c161;
//             peg$currPos += 4;
//           } else {
//             s3 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c162); }
//           }
//           if (s3 !== peg$FAILED) {
//             s4 = peg$parse_();
//             if (s4 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c172();
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//       if (s0 === peg$FAILED) {
//         s0 = peg$currPos;
//         if (input.substr(peg$currPos, 2) === peg$c173) {
//           s1 = peg$c173;
//           peg$currPos += 2;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c174); }
//         }
//         if (s1 !== peg$FAILED) {
//           s2 = peg$parse_();
//           if (s2 !== peg$FAILED) {
//             if (input.substr(peg$currPos, 4) === peg$c175) {
//               s3 = peg$c175;
//               peg$currPos += 4;
//             } else {
//               s3 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c176); }
//             }
//             if (s3 === peg$FAILED) {
//               if (input.substr(peg$currPos, 5) === peg$c177) {
//                 s3 = peg$c177;
//                 peg$currPos += 5;
//               } else {
//                 s3 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c178); }
//               }
//               if (s3 === peg$FAILED) {
//                 if (input.substr(peg$currPos, 3) === peg$c179) {
//                   s3 = peg$c179;
//                   peg$currPos += 3;
//                 } else {
//                   s3 = peg$FAILED;
//                   if (peg$silentFails === 0) { peg$fail(peg$c180); }
//                 }
//                 if (s3 === peg$FAILED) {
//                   if (input.substr(peg$currPos, 6) === peg$c181) {
//                     s3 = peg$c181;
//                     peg$currPos += 6;
//                   } else {
//                     s3 = peg$FAILED;
//                     if (peg$silentFails === 0) { peg$fail(peg$c182); }
//                   }
//                 }
//               }
//             }
//             if (s3 !== peg$FAILED) {
//               s4 = peg$parse_();
//               if (s4 !== peg$FAILED) {
//                 if (input.substr(peg$currPos, 2) === peg$c173) {
//                   s5 = peg$c173;
//                   peg$currPos += 2;
//                 } else {
//                   s5 = peg$FAILED;
//                   if (peg$silentFails === 0) { peg$fail(peg$c174); }
//                 }
//                 if (s5 !== peg$FAILED) {
//                   s6 = peg$parse_();
//                   if (s6 !== peg$FAILED) {
//                     peg$savedPos = s0;
//                     s1 = peg$c183();
//                     s0 = s1;
//                   } else {
//                     peg$currPos = s0;
//                     s0 = peg$FAILED;
//                   }
//                 } else {
//                   peg$currPos = s0;
//                   s0 = peg$FAILED;
//                 }
//               } else {
//                 peg$currPos = s0;
//                 s0 = peg$FAILED;
//               }
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//         if (s0 === peg$FAILED) {
//           s0 = peg$currPos;
//           if (input.substr(peg$currPos, 2) === peg$c173) {
//             s1 = peg$c173;
//             peg$currPos += 2;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c174); }
//           }
//           if (s1 !== peg$FAILED) {
//             s2 = peg$parse_();
//             if (s2 !== peg$FAILED) {
//               if (input.substr(peg$currPos, 3) === peg$c184) {
//                 s3 = peg$c184;
//                 peg$currPos += 3;
//               } else {
//                 s3 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c185); }
//               }
//               if (s3 === peg$FAILED) {
//                 if (input.substr(peg$currPos, 6) === peg$c186) {
//                   s3 = peg$c186;
//                   peg$currPos += 6;
//                 } else {
//                   s3 = peg$FAILED;
//                   if (peg$silentFails === 0) { peg$fail(peg$c187); }
//                 }
//                 if (s3 === peg$FAILED) {
//                   if (input.substr(peg$currPos, 5) === peg$c188) {
//                     s3 = peg$c188;
//                     peg$currPos += 5;
//                   } else {
//                     s3 = peg$FAILED;
//                     if (peg$silentFails === 0) { peg$fail(peg$c189); }
//                   }
//                   if (s3 === peg$FAILED) {
//                     if (input.substr(peg$currPos, 4) === peg$c190) {
//                       s3 = peg$c190;
//                       peg$currPos += 4;
//                     } else {
//                       s3 = peg$FAILED;
//                       if (peg$silentFails === 0) { peg$fail(peg$c191); }
//                     }
//                   }
//                 }
//               }
//               if (s3 !== peg$FAILED) {
//                 s4 = peg$parse_();
//                 if (s4 !== peg$FAILED) {
//                   if (input.substr(peg$currPos, 2) === peg$c173) {
//                     s5 = peg$c173;
//                     peg$currPos += 2;
//                   } else {
//                     s5 = peg$FAILED;
//                     if (peg$silentFails === 0) { peg$fail(peg$c174); }
//                   }
//                   if (s5 !== peg$FAILED) {
//                     s6 = peg$parse_();
//                     if (s6 !== peg$FAILED) {
//                       peg$savedPos = s0;
//                       s1 = peg$c192();
//                       s0 = s1;
//                     } else {
//                       peg$currPos = s0;
//                       s0 = peg$FAILED;
//                     }
//                   } else {
//                     peg$currPos = s0;
//                     s0 = peg$FAILED;
//                   }
//                 } else {
//                   peg$currPos = s0;
//                   s0 = peg$FAILED;
//                 }
//               } else {
//                 peg$currPos = s0;
//                 s0 = peg$FAILED;
//               }
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseListen() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 6) === peg$c193) {
//       s1 = peg$c193;
//       peg$currPos += 6;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c194); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 2) === peg$c195) {
//           s3 = peg$c195;
//           peg$currPos += 2;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c196); }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseVariable();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c197(s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseSay() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 3) === peg$c198) {
//       s1 = peg$c198;
//       peg$currPos += 3;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c199); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 5) === peg$c200) {
//         s1 = peg$c200;
//         peg$currPos += 5;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c201); }
//       }
//       if (s1 === peg$FAILED) {
//         if (input.substr(peg$currPos, 7) === peg$c202) {
//           s1 = peg$c202;
//           peg$currPos += 7;
//         } else {
//           s1 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c203); }
//         }
//         if (s1 === peg$FAILED) {
//           if (input.substr(peg$currPos, 6) === peg$c204) {
//             s1 = peg$c204;
//             peg$currPos += 6;
//           } else {
//             s1 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c205); }
//           }
//         }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseExpression();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c206(s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseIf() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 2) === peg$c207) {
//       s1 = peg$c207;
//       peg$currPos += 2;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c208); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseExpression();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c209(s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseElse() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 4) === peg$c210) {
//       s1 = peg$c210;
//       peg$currPos += 4;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c211); }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c212();
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseLoop() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 5) === peg$c213) {
//       s1 = peg$c213;
//       peg$currPos += 5;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c214); }
//     }
//     if (s1 === peg$FAILED) {
//       if (input.substr(peg$currPos, 5) === peg$c215) {
//         s1 = peg$c215;
//         peg$currPos += 5;
//       } else {
//         s1 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c216); }
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseExpression();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c217(s1, s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseContinue() {
//     var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 8) === peg$c218) {
//       s1 = peg$c218;
//       peg$currPos += 8;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c219); }
//     }
//     if (s1 === peg$FAILED) {
//       s1 = peg$currPos;
//       if (input.substr(peg$currPos, 4) === peg$c220) {
//         s2 = peg$c220;
//         peg$currPos += 4;
//       } else {
//         s2 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c221); }
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parse_();
//         if (s3 !== peg$FAILED) {
//           if (input.substr(peg$currPos, 2) === peg$c30) {
//             s4 = peg$c30;
//             peg$currPos += 2;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c222); }
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parse_();
//             if (s5 !== peg$FAILED) {
//               if (input.substr(peg$currPos, 2) === peg$c195) {
//                 s6 = peg$c195;
//                 peg$currPos += 2;
//               } else {
//                 s6 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c196); }
//               }
//               if (s6 !== peg$FAILED) {
//                 s7 = peg$parse_();
//                 if (s7 !== peg$FAILED) {
//                   if (input.substr(peg$currPos, 3) === peg$c17) {
//                     s8 = peg$c17;
//                     peg$currPos += 3;
//                   } else {
//                     s8 = peg$FAILED;
//                     if (peg$silentFails === 0) { peg$fail(peg$c223); }
//                   }
//                   if (s8 !== peg$FAILED) {
//                     s9 = peg$parse_();
//                     if (s9 !== peg$FAILED) {
//                       if (input.substr(peg$currPos, 3) === peg$c224) {
//                         s10 = peg$c224;
//                         peg$currPos += 3;
//                       } else {
//                         s10 = peg$FAILED;
//                         if (peg$silentFails === 0) { peg$fail(peg$c225); }
//                       }
//                       if (s10 !== peg$FAILED) {
//                         s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];
//                         s1 = s2;
//                       } else {
//                         peg$currPos = s1;
//                         s1 = peg$FAILED;
//                       }
//                     } else {
//                       peg$currPos = s1;
//                       s1 = peg$FAILED;
//                     }
//                   } else {
//                     peg$currPos = s1;
//                     s1 = peg$FAILED;
//                   }
//                 } else {
//                   peg$currPos = s1;
//                   s1 = peg$FAILED;
//                 }
//               } else {
//                 peg$currPos = s1;
//                 s1 = peg$FAILED;
//               }
//             } else {
//               peg$currPos = s1;
//               s1 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s1;
//             s1 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s1;
//           s1 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c226();
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseBreak() {
//     var s0, s1, s2, s3, s4, s5, s6;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 5) === peg$c227) {
//       s1 = peg$c227;
//       peg$currPos += 5;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c228); }
//     }
//     if (s1 === peg$FAILED) {
//       s1 = peg$currPos;
//       if (input.substr(peg$currPos, 5) === peg$c227) {
//         s2 = peg$c227;
//         peg$currPos += 5;
//       } else {
//         s2 = peg$FAILED;
//         if (peg$silentFails === 0) { peg$fail(peg$c228); }
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parse_();
//         if (s3 !== peg$FAILED) {
//           if (input.substr(peg$currPos, 2) === peg$c30) {
//             s4 = peg$c30;
//             peg$currPos += 2;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c222); }
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parse_();
//             if (s5 !== peg$FAILED) {
//               if (input.substr(peg$currPos, 4) === peg$c110) {
//                 s6 = peg$c110;
//                 peg$currPos += 4;
//               } else {
//                 s6 = peg$FAILED;
//                 if (peg$silentFails === 0) { peg$fail(peg$c111); }
//               }
//               if (s6 !== peg$FAILED) {
//                 s2 = [s2, s3, s4, s5, s6];
//                 s1 = s2;
//               } else {
//                 peg$currPos = s1;
//                 s1 = peg$FAILED;
//               }
//             } else {
//               peg$currPos = s1;
//               s1 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s1;
//             s1 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s1;
//           s1 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s1;
//         s1 = peg$FAILED;
//       }
//     }
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c229();
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseFunctionDeclaration() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseVariable();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 5) === peg$c230) {
//           s3 = peg$c230;
//           peg$currPos += 5;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c231); }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseFunctionDeclarationArguments();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c232(s1, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseFunctionDeclarationArguments() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseVariable();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$currPos;
//       s3 = peg$parse_();
//       if (s3 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 3) === peg$c233) {
//           s4 = peg$c233;
//           peg$currPos += 3;
//         } else {
//           s4 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c234); }
//         }
//         if (s4 !== peg$FAILED) {
//           s5 = peg$parse_();
//           if (s5 !== peg$FAILED) {
//             s3 = [s3, s4, s5];
//             s2 = s3;
//           } else {
//             peg$currPos = s2;
//             s2 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s2;
//           s2 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s2;
//         s2 = peg$FAILED;
//       }
//       if (s2 === peg$FAILED) {
//         s2 = peg$currPos;
//         s3 = peg$parse_();
//         if (s3 === peg$FAILED) {
//           s3 = null;
//         }
//         if (s3 !== peg$FAILED) {
//           if (input.charCodeAt(peg$currPos) === 44) {
//             s4 = peg$c0;
//             peg$currPos++;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c1); }
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parse_();
//             if (s5 === peg$FAILED) {
//               s5 = null;
//             }
//             if (s5 !== peg$FAILED) {
//               s3 = [s3, s4, s5];
//               s2 = s3;
//             } else {
//               peg$currPos = s2;
//               s2 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s2;
//             s2 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s2;
//           s2 = peg$FAILED;
//         }
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseFunctionDeclarationArguments();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c235(s1, s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parseVariable();
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c236(s1);
//       }
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parseGiveBack() {
//     var s0, s1, s2, s3;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 9) === peg$c237) {
//       s1 = peg$c237;
//       peg$currPos += 9;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c238); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseExpression();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c239(s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseBlankLine() {
//     var s0, s1;
//
//     s0 = peg$currPos;
//     s1 = peg$c240;
//     if (s1 !== peg$FAILED) {
//       peg$savedPos = s0;
//       s1 = peg$c241();
//     }
//     s0 = s1;
//
//     return s0;
//   }
//
//   function peg$parseFunctionCall() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseVariable();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 6) === peg$c242) {
//           s3 = peg$c242;
//           peg$currPos += 6;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c243); }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseFunctionCallArguments();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c244(s1, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parseFunctionCallArguments() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseSimpleExpression();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$currPos;
//       s3 = peg$parse_();
//       if (s3 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 3) === peg$c233) {
//           s4 = peg$c233;
//           peg$currPos += 3;
//         } else {
//           s4 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c234); }
//         }
//         if (s4 !== peg$FAILED) {
//           s5 = peg$parse_();
//           if (s5 !== peg$FAILED) {
//             s3 = [s3, s4, s5];
//             s2 = s3;
//           } else {
//             peg$currPos = s2;
//             s2 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s2;
//           s2 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s2;
//         s2 = peg$FAILED;
//       }
//       if (s2 === peg$FAILED) {
//         s2 = peg$currPos;
//         s3 = peg$parse_();
//         if (s3 === peg$FAILED) {
//           s3 = null;
//         }
//         if (s3 !== peg$FAILED) {
//           if (input.charCodeAt(peg$currPos) === 44) {
//             s4 = peg$c0;
//             peg$currPos++;
//           } else {
//             s4 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c1); }
//           }
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parse_();
//             if (s5 === peg$FAILED) {
//               s5 = null;
//             }
//             if (s5 !== peg$FAILED) {
//               s3 = [s3, s4, s5];
//               s2 = s3;
//             } else {
//               peg$currPos = s2;
//               s2 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s2;
//             s2 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s2;
//           s2 = peg$FAILED;
//         }
//       }
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseFunctionCallArguments();
//         if (s3 !== peg$FAILED) {
//           peg$savedPos = s0;
//           s1 = peg$c235(s1, s3);
//           s0 = s1;
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parseSimpleExpression();
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c236(s1);
//       }
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parseExpression() {
//     var s0;
//
//     s0 = peg$parseArithmeticExpression();
//     if (s0 === peg$FAILED) {
//       s0 = peg$parseBooleanOperation();
//     }
//
//     return s0;
//   }
//
//   function peg$parseSimpleExpression() {
//     var s0;
//
//     s0 = peg$parseFunctionCall();
//     if (s0 === peg$FAILED) {
//       s0 = peg$parseTypeLiteral();
//       if (s0 === peg$FAILED) {
//         s0 = peg$parseVariable();
//         if (s0 === peg$FAILED) {
//           s0 = peg$parseNumber();
//           if (s0 === peg$FAILED) {
//             s0 = peg$parseString();
//             if (s0 === peg$FAILED) {
//               s0 = peg$parsePoeticNumber();
//             }
//           }
//         }
//       }
//     }
//
//     return s0;
//   }
//
//   function peg$parseBooleanOperation() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseComparison();
//     if (s1 === peg$FAILED) {
//       s1 = peg$parseSimpleExpression();
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 3) === peg$c233) {
//           s3 = peg$c233;
//           peg$currPos += 3;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c234); }
//         }
//         if (s3 === peg$FAILED) {
//           if (input.substr(peg$currPos, 2) === peg$c245) {
//             s3 = peg$c245;
//             peg$currPos += 2;
//           } else {
//             s3 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c246); }
//           }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseExpression();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c247(s1, s3, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//     if (s0 === peg$FAILED) {
//       s0 = peg$currPos;
//       s1 = peg$parseComparison();
//       if (s1 === peg$FAILED) {
//         s1 = peg$parseSimpleExpression();
//       }
//       if (s1 !== peg$FAILED) {
//         peg$savedPos = s0;
//         s1 = peg$c248(s1);
//       }
//       s0 = s1;
//     }
//
//     return s0;
//   }
//
//   function peg$parseSet() {
//     var s0, s1, s2, s3, s4, s5;
//
//     s0 = peg$currPos;
//     s1 = peg$parseVariable();
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         if (input.substr(peg$currPos, 2) === peg$c145) {
//           s3 = peg$c145;
//           peg$currPos += 2;
//         } else {
//           s3 = peg$FAILED;
//           if (peg$silentFails === 0) { peg$fail(peg$c146); }
//         }
//         if (s3 === peg$FAILED) {
//           if (input.substr(peg$currPos, 3) === peg$c249) {
//             s3 = peg$c249;
//             peg$currPos += 3;
//           } else {
//             s3 = peg$FAILED;
//             if (peg$silentFails === 0) { peg$fail(peg$c250); }
//           }
//           if (s3 === peg$FAILED) {
//             if (input.substr(peg$currPos, 4) === peg$c251) {
//               s3 = peg$c251;
//               peg$currPos += 4;
//             } else {
//               s3 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c252); }
//             }
//           }
//         }
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             s5 = peg$parseExpression();
//             if (s5 !== peg$FAILED) {
//               peg$savedPos = s0;
//               s1 = peg$c253(s1, s5);
//               s0 = s1;
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   function peg$parsePut() {
//     var s0, s1, s2, s3, s4, s5, s6, s7;
//
//     s0 = peg$currPos;
//     if (input.substr(peg$currPos, 3) === peg$c254) {
//       s1 = peg$c254;
//       peg$currPos += 3;
//     } else {
//       s1 = peg$FAILED;
//       if (peg$silentFails === 0) { peg$fail(peg$c255); }
//     }
//     if (s1 !== peg$FAILED) {
//       s2 = peg$parse_();
//       if (s2 !== peg$FAILED) {
//         s3 = peg$parseExpression();
//         if (s3 !== peg$FAILED) {
//           s4 = peg$parse_();
//           if (s4 !== peg$FAILED) {
//             if (input.substr(peg$currPos, 4) === peg$c256) {
//               s5 = peg$c256;
//               peg$currPos += 4;
//             } else {
//               s5 = peg$FAILED;
//               if (peg$silentFails === 0) { peg$fail(peg$c257); }
//             }
//             if (s5 !== peg$FAILED) {
//               s6 = peg$parse_();
//               if (s6 !== peg$FAILED) {
//                 s7 = peg$parseVariable();
//                 if (s7 !== peg$FAILED) {
//                   peg$savedPos = s0;
//                   s1 = peg$c258(s3, s7);
//                   s0 = s1;
//                 } else {
//                   peg$currPos = s0;
//                   s0 = peg$FAILED;
//                 }
//               } else {
//                 peg$currPos = s0;
//                 s0 = peg$FAILED;
//               }
//             } else {
//               peg$currPos = s0;
//               s0 = peg$FAILED;
//             }
//           } else {
//             peg$currPos = s0;
//             s0 = peg$FAILED;
//           }
//         } else {
//           peg$currPos = s0;
//           s0 = peg$FAILED;
//         }
//       } else {
//         peg$currPos = s0;
//         s0 = peg$FAILED;
//       }
//     } else {
//       peg$currPos = s0;
//       s0 = peg$FAILED;
//     }
//
//     return s0;
//   }
//
//   peg$result = peg$startRuleFunction();
//
//   if (peg$result !== peg$FAILED && peg$currPos === input.length) {
//     return peg$result;
//   } else {
//     if (peg$result !== peg$FAILED && peg$currPos < input.length) {
//       peg$fail(peg$endExpectation());
//     }
//
//     throw peg$buildStructuredError(
//       peg$maxFailExpected,
//       peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
//       peg$maxFailPos < input.length
//         ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
//         : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
//     );
//   }
// }
//
// module.exports = {
//   SyntaxError: peg$SyntaxError,
//   parse:       peg$parse
// };




module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Program: peg$parseProgram },
        peg$startRuleFunction  = peg$parseProgram,

        peg$c0 = ",",
        peg$c1 = peg$literalExpectation(",", false),
        peg$c2 = "\n",
        peg$c3 = peg$literalExpectation("\n", false),
        peg$c4 = function(s) {return s},
        peg$c5 = /^[ \t]/,
        peg$c6 = peg$classExpectation([" ", "\t"], false, false),
        peg$c7 = "lumos",
        peg$c8 = peg$literalExpectation("lumos", true),
        peg$c9 = /^[a-zA-Z0-9 ]/,
        peg$c10 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], " "], false, false),
        peg$c11 = /^[!\/@#$%\^&*()-_+=.<>,]/,
        peg$c12 = peg$classExpectation(["!", "/", "@", "#", "$", "%", "^", "&", "*", "(", [")", "_"], "+", "=", ".", "<", ">", ","], false, false),
        peg$c13 = function(n) {return {t: 'Variable', n}},
        peg$c14 = function() {return {t: 'Pronoun'}},
        peg$c15 = /^[a-zA-Z]/,
        peg$c16 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c17 = "the",
        peg$c18 = peg$literalExpectation("the", true),
        peg$c19 = "my",
        peg$c20 = peg$literalExpectation("my", true),
        peg$c21 = "your",
        peg$c22 = peg$literalExpectation("your", true),
        peg$c23 = /^[a-z]/,
        peg$c24 = peg$classExpectation([["a", "z"]], false, false),
        peg$c25 = function(p, v) {return p+v},
        peg$c26 = /^[A-Z]/,
        peg$c27 = peg$classExpectation([["A", "Z"]], false, false),
        peg$c28 = /^[A-Za-z]/,
        peg$c29 = peg$classExpectation([["A", "Z"], ["a", "z"]], false, false),
        peg$c30 = "it",
        peg$c31 = peg$literalExpectation("it", true),
        peg$c32 = "he",
        peg$c33 = peg$literalExpectation("he", true),
        peg$c34 = "she",
        peg$c35 = peg$literalExpectation("she", true),
        peg$c36 = "him",
        peg$c37 = peg$literalExpectation("him", true),
        peg$c38 = "her",
        peg$c39 = peg$literalExpectation("her", true),
        peg$c40 = "them",
        peg$c41 = peg$literalExpectation("them", true),
        peg$c42 = "they",
        peg$c43 = peg$literalExpectation("they", true),
        peg$c44 = "ze",
        peg$c45 = peg$literalExpectation("ze", true),
        peg$c46 = "hir",
        peg$c47 = peg$literalExpectation("hir", true),
        peg$c48 = "zie",
        peg$c49 = peg$literalExpectation("zie", true),
        peg$c50 = "zir",
        peg$c51 = peg$literalExpectation("zir", true),
        peg$c52 = "xe",
        peg$c53 = peg$literalExpectation("xe", true),
        peg$c54 = "xem",
        peg$c55 = peg$literalExpectation("xem", true),
        peg$c56 = "ve",
        peg$c57 = peg$literalExpectation("ve", true),
        peg$c58 = "ver",
        peg$c59 = peg$literalExpectation("ver", true),
        peg$c60 = function(v) { return {t: 'Literal', v} },
        peg$c61 = "nothing",
        peg$c62 = peg$literalExpectation("nothing", true),
        peg$c63 = "nox",
        peg$c64 = peg$literalExpectation("nox", true),
        peg$c65 = function() {return 0},
        peg$c66 = "true",
        peg$c67 = peg$literalExpectation("true", true),
        peg$c68 = "wizard",
        peg$c69 = peg$literalExpectation("wizard", true),
        peg$c70 = function() {return true},
        peg$c71 = "false",
        peg$c72 = peg$literalExpectation("false", true),
        peg$c73 = "muggle",
        peg$c74 = peg$literalExpectation("muggle", true),
        peg$c75 = function() {return false},
        peg$c76 = "invisible",
        peg$c77 = peg$literalExpectation("invisible", true),
        peg$c78 = function() { return undefined},
        peg$c79 = "\"",
        peg$c80 = peg$literalExpectation("\"", false),
        peg$c81 = /^[^"]/,
        peg$c82 = peg$classExpectation(["\""], true, false),
        peg$c83 = function(v) { return {t: 'Literal', v}},
        peg$c84 = /^[0-9]/,
        peg$c85 = peg$classExpectation([["0", "9"]], false, false),
        peg$c86 = ".",
        peg$c87 = peg$literalExpectation(".", false),
        peg$c88 = function(n) { return {t: 'Literal', v: parseFloat(n)} },
        peg$c89 = "ascendio",
        peg$c90 = peg$literalExpectation("ascendio", true),
        peg$c91 = function(v) { return {t: 'Rement', v: v, o: '++'} },
        peg$c92 = "descendio",
        peg$c93 = peg$literalExpectation("descendio", true),
        peg$c94 = function(v) { return {t: 'Rement', v: v, o: '--'} },
        peg$c95 = "says",
        peg$c96 = peg$literalExpectation("says", false),
        peg$c97 = " ",
        peg$c98 = peg$literalExpectation(" ", false),
        peg$c99 = /^[^\n]/,
        peg$c100 = peg$classExpectation(["\n"], true, false),
        peg$c101 = function(v, t) { return {t: 'Set', v: v, e: {t: 'Literal', v: t}} },
        peg$c102 = function(n, d) {return {t: 'Literal', v: parseFloat(d?n+'.'+d:n)}},
        peg$c103 = function(d) {return d},
        peg$c104 = /^[',;:?!]/,
        peg$c105 = peg$classExpectation(["'", ",", ";", ":", "?", "!"], false, false),
        peg$c106 = function(l, r) { return l+r },
        peg$c107 = function(d) { return d },
        peg$c108 = function(t) {return (t.length%10).toString()},
        peg$c109 = function(l, o, r) { return {t: 'Arithmetic', l, o, r} },
        peg$c110 = "reducio",
        peg$c111 = peg$literalExpectation("reducio", true),
        peg$c112 = "-",
        peg$c113 = peg$literalExpectation("-", false),
        peg$c114 = function() {return '-'},
        peg$c115 = "engorgio",
        peg$c116 = peg$literalExpectation("engorgio", true),
        peg$c117 = "+",
        peg$c118 = peg$literalExpectation("+", false),
        peg$c119 = function() {return '+'},
        peg$c120 = "gemino",
        peg$c121 = peg$literalExpectation("gemino", true),
        peg$c122 = "*",
        peg$c123 = peg$literalExpectation("*", false),
        peg$c124 = function() {return '*'},
        peg$c125 = "sectumsepra",
        peg$c126 = peg$literalExpectation("sectumsepra", true),
        peg$c127 = "/",
        peg$c128 = peg$literalExpectation("/", false),
        peg$c129 = function() {return '/'},
        peg$c130 = function(l, b, c, r) { return {t: 'Comparison', l, r, b, c} },
        peg$c131 = "is",
        peg$c132 = peg$literalExpectation("is", true),
        peg$c133 = "not",
        peg$c134 = peg$literalExpectation("not", true),
        peg$c135 = "ain't",
        peg$c136 = peg$literalExpectation("ain't", true),
        peg$c137 = function() { return false },
        peg$c138 = peg$literalExpectation("is", false),
        peg$c139 = function() { return true },
        peg$c140 = "ahead",
        peg$c141 = peg$literalExpectation("ahead", true),
        peg$c142 = "of",
        peg$c143 = peg$literalExpectation("of", true),
        peg$c144 = function() { return 'gt' },
        peg$c145 = "behind",
        peg$c146 = peg$literalExpectation("behind", false),
        peg$c147 = function() { return 'lt' },
        peg$c148 = "as",
        peg$c149 = peg$literalExpectation("as", true),
        peg$c150 = "high",
        peg$c151 = peg$literalExpectation("high", true),
        peg$c152 = "great",
        peg$c153 = peg$literalExpectation("great", true),
        peg$c154 = "big",
        peg$c155 = peg$literalExpectation("big", true),
        peg$c156 = "strong",
        peg$c157 = peg$literalExpectation("strong", true),
        peg$c158 = function() {return 'ge'},
        peg$c159 = "low",
        peg$c160 = peg$literalExpectation("low", true),
        peg$c161 = "little",
        peg$c162 = peg$literalExpectation("little", true),
        peg$c163 = "small",
        peg$c164 = peg$literalExpectation("small", true),
        peg$c165 = "weak",
        peg$c166 = peg$literalExpectation("weak", true),
        peg$c167 = function() {return 'le'},
        peg$c168 = "listen",
        peg$c169 = peg$literalExpectation("Listen", true),
        peg$c170 = "to",
        peg$c171 = peg$literalExpectation("to", true),
        peg$c172 = function(v) {return {t:'Listen', v}},
        peg$c173 = "spell",
        peg$c174 = peg$literalExpectation("Spell", true),
        peg$c175 = function(e) {return {t:'Say', e}},
        peg$c176 = "if",
        peg$c177 = peg$literalExpectation("If", true),
        peg$c178 = function(e) { return {t: 'If', e} },
        peg$c179 = "else",
        peg$c180 = peg$literalExpectation("Else", true),
        peg$c181 = function() {return {t: 'Else'}},
        peg$c182 = "while",
        peg$c183 = peg$literalExpectation("While", true),
        peg$c184 = "until",
        peg$c185 = peg$literalExpectation("Until", true),
        peg$c186 = function(c, e) { return {t: 'Loop', c, e} },
        peg$c187 = "continue",
        peg$c188 = peg$literalExpectation("Continue", true),
        peg$c189 = function() {return {t: 'Continue'}},
        peg$c190 = "break",
        peg$c191 = peg$literalExpectation("Break", true),
        peg$c192 = "immobulous",
        peg$c193 = peg$literalExpectation("immobulous", true),
        peg$c194 = function() {return {t: 'Break'}},
        peg$c195 = "takes",
        peg$c196 = peg$literalExpectation("takes", true),
        peg$c197 = function(n, a) { return {t: 'FunctionDeclaration', n, a: a.map(a => a.n)} },
        peg$c198 = "and",
        peg$c199 = peg$literalExpectation("and", true),
        peg$c200 = function(a, b) { return [a].concat(b) },
        peg$c201 = function(a) { return [a] },
        peg$c202 = "give back",
        peg$c203 = peg$literalExpectation("Give back", true),
        peg$c204 = function(e) { return {t: 'GiveBack', e} },
        peg$c205 = "",
        peg$c206 = function() {return {t: 'BlankLine'}},
        peg$c207 = "taking",
        peg$c208 = peg$literalExpectation("taking", true),
        peg$c209 = function(f, a) { return {t: 'FunctionCall', f, a} },
        peg$c210 = "or",
        peg$c211 = peg$literalExpectation("or", true),
        peg$c212 = function(l, b, r) { return {t: 'BooleanOperation', l, b, r} },
        peg$c213 = function(l) { return l },
        peg$c214 = "was",
        peg$c215 = peg$literalExpectation("was", true),
        peg$c216 = "were",
        peg$c217 = peg$literalExpectation("were", true),
        peg$c218 = function(v, e) { return {t: 'Set', v: v, e} },
        peg$c219 = "points to",
        peg$c220 = peg$literalExpectation("points to", true),
        peg$c221 = function(e, v) {return{t: 'Set', v: v, e} },
        peg$c222 = function(e, v) { return {t: 'Set', v: v, e} },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseProgram() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseStatement();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseStatement();
      }

      return s0;
    }

    function peg$parseStatement() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFunctionDeclaration();
        if (s2 === peg$FAILED) {
          s2 = peg$parseOperation();
          if (s2 === peg$FAILED) {
            s2 = peg$parseBlankLine();
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c0;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c1); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parse_();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parse_();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 10) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c3); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c4(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseOperation() {
      var s0;

      s0 = peg$parseLoop();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIf();
        if (s0 === peg$FAILED) {
          s0 = peg$parseArithmeticStatement();
          if (s0 === peg$FAILED) {
            s0 = peg$parseGiveBack();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSet();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePut();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseListen();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSay();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseContinue();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseBreak();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsePoeticString();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsewhitespace() {
      var s0;

      if (peg$c5.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = peg$parsecomment();
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsewhitespace();
          if (s1 === peg$FAILED) {
            s1 = peg$parsecomment();
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c7) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseall_char();
          if (s4 === peg$FAILED) {
            s4 = peg$parseall_symbol();
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseall_char();
            if (s4 === peg$FAILED) {
              s4 = peg$parseall_symbol();
            }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseall_char() {
      var s0;

      if (peg$c9.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }

      return s0;
    }

    function peg$parseall_symbol() {
      var s0;

      if (peg$c11.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c12); }
      }

      return s0;
    }

    function peg$parseVariable() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseCommonVariable();
      if (s1 === peg$FAILED) {
        s1 = peg$parseProperVariable();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesimple_variable();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePronoun();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsesimple_variable() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c15.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c15.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseCommonVariable() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c17) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c19) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c21) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c23.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c24); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c23.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c24); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c25(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseProperWord() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c26.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c28.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c29); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c28.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseProperVariable() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseProperWord();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseProperVariable();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseProperWord();
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsePronoun() {
      var s0;

      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c30) {
        s0 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c32) {
          s0 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c34) {
            s0 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c36) {
              s0 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c38) {
                s0 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c40) {
                  s0 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c41); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c42) {
                    s0 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c43); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c44) {
                      s0 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c45); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c46) {
                        s0 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c47); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c48) {
                          s0 = input.substr(peg$currPos, 3);
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c49); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c50) {
                            s0 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c51); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c52) {
                              s0 = input.substr(peg$currPos, 2);
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c53); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c54) {
                                s0 = input.substr(peg$currPos, 3);
                                peg$currPos += 3;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c55); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c56) {
                                  s0 = input.substr(peg$currPos, 2);
                                  peg$currPos += 2;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c58) {
                                    s0 = input.substr(peg$currPos, 3);
                                    peg$currPos += 3;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseTypeLiteral() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTypeLiteralValue();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c60(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTypeLiteralValue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c61) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c63) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c65();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c66) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c68) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c71) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c73) {
              s1 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c75();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c76) {
              s1 = input.substr(peg$currPos, 9);
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c78();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseString() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c79;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = [];
        if (peg$c81.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c82); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c81.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c82); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c79;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c83(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNumber() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = [];
      if (peg$c84.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c84.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c86;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c87); }
        }
        if (s5 !== peg$FAILED) {
          s6 = [];
          if (peg$c84.test(input.charAt(peg$currPos))) {
            s7 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              if (peg$c84.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
              }
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseArithmeticStatement() {
      var s0;

      s0 = peg$parseBuildUp();
      if (s0 === peg$FAILED) {
        s0 = peg$parseKnockDown();
      }

      return s0;
    }

    function peg$parseBuildUp() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c89) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariable();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c91(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseKnockDown() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c92) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseVariable();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c94(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePoeticString() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c95) {
            s3 = peg$c95;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c96); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s4 = peg$c97;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c98); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              if (peg$c99.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c100); }
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                if (peg$c99.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = input.substring(s5, peg$currPos);
              } else {
                s5 = s6;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c101(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePoeticNumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePoeticDigits();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePoeticDecimal();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c102(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePoeticDecimal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c86;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePoeticDigits();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c103(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePoeticDigits() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsePoeticDigit();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parse_();
        if (s3 === peg$FAILED) {
          if (peg$c104.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c105); }
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              if (peg$c104.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c105); }
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePoeticDigits();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c106(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePoeticDigit();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c107(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsePoeticDigit() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c28.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c28.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c108(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseArithmeticExpression() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSimpleExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseArithmeticOperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSimpleExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c109(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArithmeticOperator() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c110) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c111); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c112;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c113); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c114();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c115) {
          s1 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c116); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c117;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c119();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c120) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c121); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s1 = peg$c122;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c123); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c124();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c125) {
              s1 = input.substr(peg$currPos, 11);
              peg$currPos += 11;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c126); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s1 = peg$c127;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c128); }
              }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c129();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseComparison() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSimpleExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseBoolCheck();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseComparator();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSimpleExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c130(s1, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBoolCheck() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c131) {
        s2 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
            s4 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c134); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c135) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c136); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c137();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c131) {
          s1 = peg$c131;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c139();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseComparator() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c140) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c142) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c143); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c144();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c145) {
          s1 = peg$c145;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c146); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c147();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c148) {
            s1 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c149); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c150) {
                s3 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c151); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c152) {
                  s3 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c154) {
                    s3 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c156) {
                      s3 = input.substr(peg$currPos, 6);
                      peg$currPos += 6;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c157); }
                    }
                  }
                }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c148) {
                    s5 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c149); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c158();
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c148) {
              s1 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c149); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c159) {
                  s3 = input.substr(peg$currPos, 3);
                  peg$currPos += 3;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c160); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c161) {
                    s3 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c162); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {
                      s3 = input.substr(peg$currPos, 5);
                      peg$currPos += 5;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c164); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c165) {
                        s3 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c166); }
                      }
                    }
                  }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c148) {
                      s5 = input.substr(peg$currPos, 2);
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c149); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c167();
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseListen() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c168) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c169); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c170) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseVariable();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c172(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSay() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c173) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c174); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c175(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIf() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c176) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c178(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseElse() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c179) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c180); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c181();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseLoop() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c182) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c184) {
          s1 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c185); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c186(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseContinue() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c187) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c189();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBreak() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c190) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c191); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c192) {
          s1 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c193); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c194();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFunctionDeclaration() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c195) {
            s3 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c196); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFunctionDeclarationArguments();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c197(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionDeclarationArguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c198) {
            s4 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c199); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c0;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionDeclarationArguments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c200(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c201(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseGiveBack() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c203); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c204(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBlankLine() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$c205;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c206();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFunctionCall() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c207) {
            s3 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c208); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseFunctionCallArguments();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c209(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFunctionCallArguments() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSimpleExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c198) {
            s4 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c199); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c0;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c1); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s3 = [s3, s4, s5];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseFunctionCallArguments();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c200(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSimpleExpression();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c201(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseExpression() {
      var s0;

      s0 = peg$parseArithmeticExpression();
      if (s0 === peg$FAILED) {
        s0 = peg$parseBooleanOperation();
      }

      return s0;
    }

    function peg$parseSimpleExpression() {
      var s0;

      s0 = peg$parseFunctionCall();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTypeLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseVariable();
          if (s0 === peg$FAILED) {
            s0 = peg$parseNumber();
            if (s0 === peg$FAILED) {
              s0 = peg$parseString();
              if (s0 === peg$FAILED) {
                s0 = peg$parsePoeticNumber();
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBooleanOperation() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseComparison();
      if (s1 === peg$FAILED) {
        s1 = peg$parseSimpleExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c198) {
            s3 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c199); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c210) {
              s3 = input.substr(peg$currPos, 2);
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c211); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c212(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseComparison();
        if (s1 === peg$FAILED) {
          s1 = peg$parseSimpleExpression();
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c213(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseSet() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseVariable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c131) {
            s3 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c214) {
              s3 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c215); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c216) {
                s3 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c217); }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c218(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint_assignment() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c219) {
            s3 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c220); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseVariable();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c221(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseint() {
      var s0, s1;

      s0 = [];
      if (peg$c84.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c84.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePut() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c219) {
            s3 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c220); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseVariable();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c222(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
